/*******************************************************************************
 * Copyright (c) 1991, 2021 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution
 * and is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/
package com.ibm.j9ddr.vm29.structure;

/**
 * Structure: MM_WorkPackets
 *
 * This stub class represents a class that can return in memory offsets
 * to VM C and C++ structures.
 *
 * This particular implementation exists only to allow StructurePointer code to
 * compile at development time.  This is never loaded at run time.
 *
 * At runtime generated byte codes returning actual offset values from the core file
 * will be loaded by the StructureClassLoader.
 */
public final class MM_WorkPackets {

	// VM Constants

	public static final long SIZEOF;
	public static final long _fullPacketThreshold;
	public static final long _increaseFactor;
	public static final long _indexMask;
	public static final long _initialBlocks;
	public static final long _maxPacketSearch;
	public static final long _maxPacketsBlocks;
	public static final long _minPacketsInBlock;
	public static final long _packetSize;
	public static final long _satisfactoryCapacity;
	public static final long _slotsInPacket;

	// Offsets

	public static final int __activePacketsOffset_;
	public static final int __allocatingPacketsOffset_;
	public static final int __deferredFullPacketListOffset_;
	public static final int __deferredPacketListOffset_;
	public static final int __emptyPacketListOffset_;
	public static final int __extensionsOffset_;
	public static final int __fullPacketListOffset_;
	public static final int __inputListDoneIndexOffset_;
	public static final int __inputListMonitorOffset_;
	public static final int __inputListWaitCountOffset_;
	public static final int __maxPacketsOffset_;
	public static final int __nonEmptyPacketListOffset_;
	public static final int __overflowHandlerOffset_;
	public static final int __packetsBlocksTopOffset_;
	public static final int __packetsPerBlockOffset_;
	public static final int __packetsStartOffset_;
	public static final int __portLibraryOffset_;
	public static final int __relativelyFullPacketListOffset_;

	// Static Initializer

	private static final boolean RUNTIME = false;

	static {
		if (!RUNTIME) {
			throw new IllegalArgumentException("This stub class should not be on your classpath");
		}

		SIZEOF = 0;
		_fullPacketThreshold = 0;
		_increaseFactor = 0;
		_indexMask = 0;
		_initialBlocks = 0;
		_maxPacketSearch = 0;
		_maxPacketsBlocks = 0;
		_minPacketsInBlock = 0;
		_packetSize = 0;
		_satisfactoryCapacity = 0;
		_slotsInPacket = 0;
		__activePacketsOffset_ = 0;
		__allocatingPacketsOffset_ = 0;
		__deferredFullPacketListOffset_ = 0;
		__deferredPacketListOffset_ = 0;
		__emptyPacketListOffset_ = 0;
		__extensionsOffset_ = 0;
		__fullPacketListOffset_ = 0;
		__inputListDoneIndexOffset_ = 0;
		__inputListMonitorOffset_ = 0;
		__inputListWaitCountOffset_ = 0;
		__maxPacketsOffset_ = 0;
		__nonEmptyPacketListOffset_ = 0;
		__overflowHandlerOffset_ = 0;
		__packetsBlocksTopOffset_ = 0;
		__packetsPerBlockOffset_ = 0;
		__packetsStartOffset_ = 0;
		__portLibraryOffset_ = 0;
		__relativelyFullPacketListOffset_ = 0;
	}

}
